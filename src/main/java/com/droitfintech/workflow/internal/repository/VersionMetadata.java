package com.droitfintech.workflow.internal.repository;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * VersionMetadata (C) 2014 Droit Financial Technologies, LLC
 * 
 * VersionMetadata holds all of the information needed by the repository to
 * persist/retrieve a snapshot or module correctly. This helps decouple the
 * repository API (and consequently the WorkflowService and WorkflowController)
 * from the repository implementation.
 * 
 * @author nathanbrei
 * 
 */
@JsonPropertyOrder({ "id", "branch", "majorNumber", "minorNumber",
		"createdDate", "author", "comment", "status", "parentVersionId",
		"mergeVersionId" })
public class VersionMetadata implements Comparable<VersionMetadata> {

	private static SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");

	private String entityName;
	private String branch;
	private Date effectiveDate;
	private int version = 0;
	private int editNumber;

	private String status;
	private String author;
	private String comment;
	private Date createdDate;
	private String parentVersionId;
	private String mergeVersionId;

	public static final String LIVE_STATUS = "locked";
	public static final String DEV_STATUS = "development";
	public static final String TEST_STATUS = "test";
	
	public VersionMetadata() {
	}
	
	
	// copy constructor for editor 
	public VersionMetadata(VersionMetadata rhs) {
		super();
		this.entityName = rhs.entityName;
		this.branch = rhs.branch;
		this.effectiveDate = rhs.effectiveDate;
		this.version = rhs.version;
		this.editNumber = rhs.editNumber;
		this.status = rhs.status;
		this.author = rhs.author;
		this.comment = rhs.comment;
		this.createdDate = rhs.createdDate;
		this.parentVersionId = rhs.parentVersionId;
		this.mergeVersionId = rhs.mergeVersionId;
	}



	public int compareTo(VersionMetadata vm) {
		return this.getCreatedDate().compareTo(vm.getCreatedDate());
	}

	public String getId() {
		return entityName + "." + branch + "."
				+ (version > 0 ? version : formatter.format(effectiveDate))
				+ "." + editNumber;
	}
	
	// Needed for Jackson
	public void setId(String id) {
	}

	public String getEntityName() {
		return entityName;
	}

	public void setEntityName(String entityName) {
		this.entityName = entityName;
	}

	public String getBranch() {
		return branch;
	}

	public void setBranch(String branch) {
		this.branch = branch;
	}

	public Date getEffectiveDate() {
		return effectiveDate;
	}

	public void setEffectiveDate(Date effectiveDate) {
		this.effectiveDate = effectiveDate;
	}
	
	public int getVersion() {
		return version;
	}


	public void setVersion(int version) {
		this.version = version;
	}


	public int getEditNumber() {
		return editNumber;
	}

	public void setEditNumber(int editNumber) {
		this.editNumber = editNumber;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public Date getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	public String getParentVersionId() {
		return parentVersionId;
	}

	public void setParentVersionId(String parentVersionId) {
		this.parentVersionId = parentVersionId;
	}

	public String getMergeVersionId() {
		return mergeVersionId;
	}

	public void setMergeVersionId(String mergeVersionId) {
		this.mergeVersionId = mergeVersionId;
	}
	
	/**
	 * Compare versions by major number and then by minor number as serarate numbers. 
	 * This makes 1.10 greater then 1.1 which would numerically be the same. Return is the same as 
	 * Integer.compareTo().
	 * @param rhs instance to compare with this
	 * @return
	 */
	public int compareToVersion(VersionMetadata rhs) {
		int rc = Integer.compare(version, rhs.version);
		if(rc == 0)
			rc = Integer.compare(editNumber, rhs.editNumber);
		return rc;
	}
	
	@JsonIgnore
	public String getFullVersionString() {
		StringBuffer sb = new StringBuffer();
		sb.append(version);
		sb.append(".");
		sb.append(editNumber);
		return sb.toString();
	}

	// Generated by Eclipse
	@Override
	public String toString() {
		return "[entityName=" + entityName + ", branch="
				+ branch + ", effectiveDate=" + effectiveDate  
				+ "version=" + version + ", editNumber="
				+ editNumber + ", status=" + status + ", author=" + author
				+ ", comment=" + comment + ", createdDate=" + createdDate
				+ ", parentVersionId=" + parentVersionId + ", mergeVersionId="
				+ mergeVersionId + "]";
	}
}
